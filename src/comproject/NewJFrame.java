/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package comproject;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Hp
 */
public class NewJFrame extends javax.swing.JFrame {
private int coun=0;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
       
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("communication project");

        jButton1.setText("4bit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("8bit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("16bit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("4bit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("   send data");

        jButton5.setText("8bit");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("16 bit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setText("receive data");

        jLabel2.setText(" with errors");

        jButton7.setText("4bit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("8bit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel6.setText("without errors");

        jButton9.setText("16bit");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(272, 272, 272))))
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton6)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)))
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 139, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
int r1,r2,r3;
Random random = new Random();

        // Generate a random number in the range from 0 to 7
        int randomNumber = random.nextInt(4);
        int counter=0;
    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
        Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 4;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
               int e[]=new int[4];
                int p[]=new int[4];
                for(int i=0;i<4;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   e[i]= Integer.parseInt(""+chunk.charAt(i));
                }
                if(counter==randomNumber){
                 if(e[randomNumber]==1){
                     e[randomNumber]=0;
                 }else{
                    e[randomNumber]=1;
                     
                 }
                 counter=0;
                 randomNumber=random.nextInt(4);
                }
                 try {
                     String te="";
           for(int i=0;i<4;i++){
            te=te+String.valueOf(e[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                counter++;
                
                r1=p[0]^p[1]^p[3];
                r2=p[0]^p[2]^p[3];
                r3=p[1]^p[2]^p[3];
               
              

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);
          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }
            JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH ERRORS");

            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 int r1,r2,r3;
int counter=0;
int counter2=0;
int co=0;
  
        int charsPerLoop = 4;

        try (BufferedReader reader = new BufferedReader(new FileReader("sent.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              counter2+=4;
                int p[]=new int[4];
                for(int i=0;i<4;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 
       
               
                
                r1=p[0]^p[1]^p[3];
                r2=p[0]^p[2]^p[3];
                r3=p[1]^p[2]^p[3];
                 
                int p1 = 0,p2 = 0,p3 = 0;
                 int charsPerLoop2 = 3;
                try (BufferedReader reader2 = new BufferedReader(new FileReader("r8.txt"))) {
            char[] buffer2 = new char[charsPerLoop2];
            int bytesRead2;
  int y=0;
            while ((bytesRead2 = reader2.read(buffer2)) != -1) {
                // Process or print the chunk as needed
                String chunk2 = new String(buffer2, 0, bytesRead2);
              
                if(y==co){
              p1=Integer.parseInt(""+chunk2.charAt(0));
              p2=Integer.parseInt(""+chunk2.charAt(1));
              p3=Integer.parseInt(""+chunk2.charAt(2));
             int o1=p1^r1;int o2=p2^r2;int o3= p3^r3; 
 if((o1!=0)||(o2!=0)||(o3!=0)){
     counter++;
 }
                break;}
                y++;
                
          }
co++;
                   
 
        } catch (IOException e) {
            e.printStackTrace();
        }


                
            }

    
        } catch (IOException e) {
            e.printStackTrace();
        } 
        
        if(counter==0){
            jLabel5.setText("THERE IS NO ERRORS IN THE SENT DATA");
              JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }else{
            double n=(double)counter/counter2;
            n=n*100;
            
           
            jLabel5.setText("the error percentage is : "+n+"%");
            JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }
           
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   
int r1,r2,r3,r4;
Random random = new Random();

        // Generate a random number in the range from 0 to 7
        int randomNumber = random.nextInt(4);
        int counter=0;
    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
        Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 8;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
               int e[]=new int[8];
                int p[]=new int[8];
                for(int i=0;i<8;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   e[i]= Integer.parseInt(""+chunk.charAt(i));
                }
                if(counter==randomNumber){
                 if(e[randomNumber]==1){
                     e[randomNumber]=0;
                 }else{
                    e[randomNumber]=1;
                     
                 }
                 counter=0;
                 randomNumber=random.nextInt(4);
                }
                 try {
                     String te="";
           for(int i=0;i<8;i++){
            te=te+String.valueOf(e[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                counter++;
                
                r1=p[0]^p[1]^p[3]^p[4]^p[6];
                r2=p[0]^p[2]^p[3]^p[5]^p[6];
                r3=p[1]^p[2]^p[3]^p[7];
                r4=p[4]^p[5]^p[6]^p[7];
              

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3)+String.valueOf(r4);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);


        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }
                      JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH ERRORS");

            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         int r1,r2,r3;

    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
         Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 4;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              
                int p[]=new int[4];
                for(int i=0;i<4;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 try {
                     String te="";
           for(int i=0;i<4;i++){
            te=te+String.valueOf(p[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
               
                
                r1=p[0]^p[1]^p[3];
                r2=p[0]^p[2]^p[3];
                r3=p[1]^p[2]^p[3];
                
              

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }

                JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH NO ERRORS");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
      int r1,r2,r3,r4;

    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
         Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 8;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              
                int p[]=new int[8];
                for(int i=0;i<8;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 try {
                     String te="";
           for(int i=0;i<8;i++){
            te=te+String.valueOf(p[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
               
                
                r1=p[0]^p[1]^p[3]^p[4]^p[6];
                r2=p[0]^p[2]^p[3]^p[5]^p[6];
                r3=p[1]^p[2]^p[3]^p[7];
                r4=p[4]^p[5]^p[6]^p[7];
              

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3)+String.valueOf(r4);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }

                        JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH NO ERRORS");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
int r1,r2,r3,r4,r5;
Random random = new Random();

        // Generate a random number in the range from 0 to 7
        int randomNumber = random.nextInt(6);
        int counter=0;
    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
        Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 16;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
               int e[]=new int[16];
                int p[]=new int[16];
                for(int i=0;i<16;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   e[i]= Integer.parseInt(""+chunk.charAt(i));
                }
                if(counter==randomNumber){
                 if(e[randomNumber]==1){
                     e[randomNumber]=0;
                 }else{
                    e[randomNumber]=1;
                     
                 }
                 counter=0;
                 randomNumber=random.nextInt(6);
                }
                 try {
                     String te="";
           for(int i=0;i<16;i++){
            te=te+String.valueOf(e[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                counter++;
                
                r1=p[0]^p[1]^p[3]^p[4]^p[6]^p[8]^p[10]^p[11]^p[13]^p[15];
                r2=p[0]^p[2]^p[3]^p[5]^p[6]^p[9]^p[10]^p[12]^p[13];
                r3=p[1]^p[2]^p[3]^p[7]^p[8]^p[9]^p[10]^p[14]^p[15];
                r4=p[4]^p[5]^p[6]^p[7]^p[8]^p[9]^p[10];
              r5=p[11]^p[12]^p[13]^p[14]^p[15];

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3)+String.valueOf(r4)+String.valueOf(r5);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);


        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }

                                 JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH ERRORS");
 
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
          int r1,r2,r3,r4,r5;

    try {
        Files.write(Path.of("r8.txt"), new byte[0]);
         Files.write(Path.of("sent.txt"), new byte[0]);
    } catch (IOException ex) {
        Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
    }
        // Number of characters to read in each loop iteration
        int charsPerLoop = 16;

        try (BufferedReader reader = new BufferedReader(new FileReader("in8.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              
                int p[]=new int[16];
                for(int i=0;i<16;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 try {
                     String te="";
           for(int i=0;i<16;i++){
            te=te+String.valueOf(p[i]);   
           }
            Files.write( Path.of("sent.txt"), te.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
               
                
          r1=p[0]^p[1]^p[3]^p[4]^p[6]^p[8]^p[10]^p[11]^p[13]^p[15];
                r2=p[0]^p[2]^p[3]^p[5]^p[6]^p[9]^p[10]^p[12]^p[13];
                r3=p[1]^p[2]^p[3]^p[7]^p[8]^p[9]^p[10]^p[14]^p[15];
                r4=p[4]^p[5]^p[6]^p[7]^p[8]^p[9]^p[10];
              r5=p[11]^p[12]^p[13]^p[14]^p[15];
              

String textToAppend=String.valueOf(r1)+String.valueOf(r2)+String.valueOf(r3)+String.valueOf(r4)+String.valueOf(r5);
        try {
            // Append text to the file
            Files.write( Path.of("r8.txt"), textToAppend.getBytes(), StandardOpenOption.APPEND);

          
        } catch (IOException ep) {
            ep.printStackTrace();
        }
                
            }

                        JOptionPane.showMessageDialog(null, "THE DATA IS SENT WITH NO ERRORS");

        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int r1,r2,r3,r4;
int counter=0;
int counter2=0;
int co=0;
  
        int charsPerLoop = 8;

        try (BufferedReader reader = new BufferedReader(new FileReader("sent.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              counter2+=8;
                int p[]=new int[8];
                for(int i=0;i<8;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 
       
               
                
               r1=p[0]^p[1]^p[3]^p[4]^p[6];
                r2=p[0]^p[2]^p[3]^p[5]^p[6];
                r3=p[1]^p[2]^p[3]^p[7];
                r4=p[4]^p[5]^p[6]^p[7];
                int p1 = 0,p2 = 0,p3 = 0,p4=0;
                 int charsPerLoop2 = 4;
                try (BufferedReader reader2 = new BufferedReader(new FileReader("r8.txt"))) {
            char[] buffer2 = new char[charsPerLoop2];
            int bytesRead2;
  int y=0;
            while ((bytesRead2 = reader2.read(buffer2)) != -1) {
                // Process or print the chunk as needed
                String chunk2 = new String(buffer2, 0, bytesRead2);
              
                if(y==co){
              p1=Integer.parseInt(""+chunk2.charAt(0));
              p2=Integer.parseInt(""+chunk2.charAt(1));
              p3=Integer.parseInt(""+chunk2.charAt(2));
              p4=Integer.parseInt(""+chunk2.charAt(3));
             int o1=p1^r1;int o2=p2^r2;int o3= p3^r3; int o4=p4^r4;
 if((o1!=0)||(o2!=0)||(o3!=0)||(o4!=0)){
     counter++;
 }
                break;}
                y++;
                
          }
co++;
                   
 
        } catch (IOException e) {
            e.printStackTrace();
        }


                
            }

    
        } catch (IOException e) {
            e.printStackTrace();
        } 
        
        if(counter==0){
            jLabel5.setText("THERE IS NO ERRORS IN THE SENT DATA");
              JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }else{
            double n=(double)counter/counter2;
            n=n*100;
            
            
           
            jLabel5.setText("the error percentage is : "+n+"%");
              JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }
     
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int r1,r2,r3,r4,r5;
int counter=0;
int counter2=0;
int co=0;
  
        int charsPerLoop = 16;

        try (BufferedReader reader = new BufferedReader(new FileReader("sent.txt"))) {
            char[] buffer = new char[charsPerLoop];
            int bytesRead;

            while ((bytesRead = reader.read(buffer)) != -1) {
                // Process or print the chunk as needed
                String chunk = new String(buffer, 0, bytesRead);
              counter2+=16;
                int p[]=new int[16];
                for(int i=0;i<16;i++){
                    p[i]=Integer.parseInt(""+chunk.charAt(i));
                   
                }
               
                 
       
               
                
              r1=p[0]^p[1]^p[3]^p[4]^p[6]^p[8]^p[10]^p[11]^p[13]^p[15];
                r2=p[0]^p[2]^p[3]^p[5]^p[6]^p[9]^p[10]^p[12]^p[13];
                r3=p[1]^p[2]^p[3]^p[7]^p[8]^p[9]^p[10]^p[14]^p[15];
                r4=p[4]^p[5]^p[6]^p[7]^p[8]^p[9]^p[10];
              r5=p[11]^p[12]^p[13]^p[14]^p[15];
                int p1 = 0,p2 = 0,p3 = 0,p4=0,p5=0;
                 int charsPerLoop2 = 5;
                try (BufferedReader reader2 = new BufferedReader(new FileReader("r8.txt"))) {
            char[] buffer2 = new char[charsPerLoop2];
            int bytesRead2;
  int y=0;
            while ((bytesRead2 = reader2.read(buffer2)) != -1) {
                // Process or print the chunk as needed
                String chunk2 = new String(buffer2, 0, bytesRead2);
              
                if(y==co){
              p1=Integer.parseInt(""+chunk2.charAt(0));
              p2=Integer.parseInt(""+chunk2.charAt(1));
              p3=Integer.parseInt(""+chunk2.charAt(2));
              p4=Integer.parseInt(""+chunk2.charAt(3));
               p5=Integer.parseInt(""+chunk2.charAt(4));
             int o1=p1^r1;int o2=p2^r2;int o3= p3^r3; int o4= p4^r4; int o5= p5^r5; 
 if((o1!=0)||(o2!=0)||(o3!=0)||(o4!=0)||(o5!=0)){
     counter++;
 }
                break;}
                y++;
                
          }
co++;
                   
 
        } catch (IOException e) {
            e.printStackTrace();
        }


                
            }

    
        } catch (IOException e) {
            e.printStackTrace();
        } 
        
        if(counter==0){
            jLabel5.setText("THERE IS NO ERRORS IN THE SENT DATA");
              JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }else{
            double n=(double)counter/counter2;
            n=n*100;
           
           
            jLabel5.setText("the error percentage is : "+n+"%");
              JOptionPane.showMessageDialog(null, "The system checked "+counter2+" and it found "
            + counter +" bit error");
        }
       
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
